/*
    start.me - PHP MakeMe file
 */

Me.load({
    targets: {
        cache: {
            action: `
                trace('Build', 'PHP libraries')
                if (Config.OS == 'windows') {
                    function cmd(command) {
                        sh('windows.bat ' + Config.CPU + ' ' + command)
                    }
                    cmd('/bin/find . -name "*.obj" -print | xargs rm -f')
                    cmd('rm -fr Debug_TS Release_TS')
                    cmd('cmd /c buildconf.bat')
                    cmd('cscript /nologo configure.js --disable-debug --without-gd --disable-bcmath \
                         --disable-calendar --disable-com-dotnet --disable-filter --disable-json \
                         --disable-ipv6 --disable-odbc --disable-tokenizer --disable-zlib --disable-ftp \
                         --enable-embed --enable-zts --without-dom --without-libxml --without-iconv \
                         --without-simplexml --without-xml')
                    cmd('nmake')

                } else if (Config.OS == 'macosx') {
//  make libphp5.la
//  configure arguments
//  may need -bind-at-load
//  may need -lresolv
                    sh('chmod +x Configure config; touch Makefile')
                    MACOSX_DEPLOYMENT_TARGET=10.5 ; \
                    if [ "$(BLD_ARCH)" = 'x64' ] ; then \
                        GCC_ARCH="x86_64" ; \
                    else \
                        GCC_ARCH="i686" ; \
                    fi ; \
                    CC=/usr/bin/gcc; \
                    CCFLAGS="-arch $${GCC_ARCH}" ; \
                    CCFLAGS="$CFLAGS" ; \
                    LDFLAGS="-Wl,-install_name,@rpath/libphp5.dylib -arch $${GCC_ARCH} -bind_at_load -lresolv" ; \
                    export CC LDFLAGS CFLAGS CCFLAGS MACOSX_DEPLOYMENT_TARGET ; \
                    cd latest ; ./configure --build=$${GCC_ARCH}-apple-darwin10.0.0 $(OPTIONS) $(MORE_OPTIONS); \
                    cp Makefile Makefile.new ; \
                    sed 's/EXTRA_LDFLAGS = -avoid-version -module/EXTRA_LDFLAGS = -avoid-version/' < Makefile.new > Makefile ; \

                } else {
                    sh('make clean')
                    sh('make')
                }
            `,
        },

        /*
            Patch new releases - run manually
         */ 
        patch: {
            action: `
                sh('git checkout package.json windows.bat pak-1.patch start.me')
                for each (f in Path('.').files('*.patch')) {
                    sh('patch < ' + f)
                }
            `
        },
    },
})
